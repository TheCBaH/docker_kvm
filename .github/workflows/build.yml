name: CI

on:
  push:
  pull_request:
  schedule:
    - cron: 0 1 * * MON
  workflow_dispatch:

jobs:
  live-server:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: autoinstall.image
      run: |
        set -x
        make ubuntu-autoinstall.image
        make NO_KVM=y ubuntu-autoinstall.cfg
        make NO_KVM=y ubuntu-autoinstall
    - name: kvm.image
      run: |
        set -x
        image=$(make image.print)
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$GITHUB_REPOSITORY/$image
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        make DOCKER_BUILD_OPTS="--cache-from=$IMAGE_ID" kvm_image
    - name: autoinstall
      timeout-minutes: 120
      run: |
        set -x
        make kvm_run CMD='./kvm.sh --os ubuntu-20.04 --debug auto-install'
        ls -alh data/img
    - name: server.boot.test
      run: |
        make kvm_run CMD='./kvm.sh --boot data/img/ubuntu-20.04-rootfs.img --debug --dryrun test'
    - name: server.ssh.test
      timeout-minutes: 6
      run: |
        make kvm_run CMD='./kvm.sh --boot data/img/ubuntu-20.04-rootfs.img --debug --dryrun ssh id'
    - name: kvm.ssh.start
      run: |
        set -x
        make ubuntu-live-20.04.ssh.start SSH_START_OPTS='--boot data/img/ubuntu-20.04-rootfs.img --dryrun'
        sleep 10
        make ubuntu-live-20.04.ssh.log
    - name: kvm.ssh
      run: |
        set -x
        time ./kvm_ssh ssh id
        time ./kvm_ssh ssh sudo id
        ./kvm_ssh ssh cat /etc/issue
        ./kvm_ssh ssh uname -a
        ./kvm_ssh ssh df -h
    - name: kvm.ssh.stop
      run: |
        make ubuntu-live-20.04.ssh.stop
    - name: failed-images
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: ubuntu-autoinstal
        path: |
          data/img
          data/var
  cloud-img:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [16.04, 18.04, 20.04]
        os: [ubuntu]
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: kvm.image
      run: |
        set -x
        image=$(make image.print)
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$GITHUB_REPOSITORY/$image
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        old_id=''
        if docker pull $IMAGE_ID; then
          old_id=$(docker image inspect $IMAGE_ID --format "{{.ID}}")
        fi
        make kvm_image DOCKER_BUILD_OPTS="--cache-from=$IMAGE_ID"
        new_id=$(docker image inspect $image --format "{{.ID}}")
        if [ "$old_id" != "$new_id" ]; then
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker tag $image $IMAGE_ID:latest
          docker push $IMAGE_ID:latest || true
          rm -rf ~/.docker
        fi
        make kvm_run CMD='bash -ceux "id"'
    - uses: actions/cache@v2
      id: cache_base
      with:
        path: data/base
        key: base-${{ matrix.os }}-${{ matrix.version }}-${{ hashFiles('Makefile') }}
    - uses: actions/cache@v2
      id: cache_img
      with:
        path: data/img
        key: img-${{ matrix.os }}-${{ matrix.version }}-${{ hashFiles('Makefile', 'kvm.sh') }}
    - name: kvm.init
      if: steps.cache_base.outputs.cache-hit != 'true' || steps.cache_img.outputs.cache-hit != 'true'
      run: |
        make ${{ matrix.os }}-${{ matrix.version }}.init
    - name: kvm.test.boot
      run: |
        make ${{ matrix.os }}-${{ matrix.version }}.test.boot
    - name: kvm.ssh.test
      run: |
        make ${{ matrix.os }}-${{ matrix.version }}.ssh.test
    - name: kvm.ssh.start
      run: |
        set -x
        make ${{ matrix.os }}-${{ matrix.version }}.ssh.start SSH_START_OPTS='--dryrun'
        sleep 10
        make ${{ matrix.os }}-${{ matrix.version }}.ssh.log
    - name: kvm.ssh
      run: |
        set -x
        time ./kvm_ssh ssh id
        time ./kvm_ssh ssh sudo id
        ./kvm_ssh ssh cat /etc/issue
        ./kvm_ssh ssh ls -al /mnt
        ./kvm_ssh ssh uname -a
        ./kvm_ssh ssh df -h
    - name: kvm.ssh.stop
      run: |
        make ${{ matrix.os }}-${{ matrix.version }}.ssh.stop
  alpine:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ['3.9', '3.10', '3.11', '3.12', '3.13', '3.14']
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: kvm.image
      run: |
        set -x
        image=$(make image.print)
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$GITHUB_REPOSITORY/$image
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        docker pull $IMAGE_ID || true
        make kvm_image DOCKER_BUILD_OPTS="--cache-from=$IMAGE_ID"
    - name: prepare
      run: |
        make kvm_run CMD='./kvm.sh prepare'
    - name: alpine.image
      run: |
        set -x
        make alpine-make-vm-image.image
        git -C alpine-make-vm-image apply <alpine/alpine_sync.patch
        sudo modprobe nbd max_part=0
        make alpine-make-vm-image.image_run ALPINE_VERSION="${{ matrix.version }}"
    - name: alpine.test.boot
      run: |
        make alpine-${{ matrix.version }}.test.boot
    - name: image.compact
      run: |
        set -x
        make kvm_run CMD='./compact-qcow.sh data/img/alpine-${{ matrix.version }}-boot.img'
        make alpine-${{ matrix.version }}.test.boot
    - name: ssh.test
      run: |
        make alpine-${{ matrix.version }}.ssh.test
    - name: kvm.ssh.start
      run: |
        make alpine-${{ matrix.version }}.ssh.start SSH_START_OPTS='--dryrun'
        sleep 10
        make alpine-${{ matrix.version }}.ssh.log
    - name: ssh
      run: |
        set -x
        time ./kvm_ssh ssh id
        time ./kvm_ssh ssh sudo id
        ./kvm_ssh ssh cat /etc/issue
        ./kvm_ssh ssh uname -a
        ./kvm_ssh ssh df -h /
    - name: ssh.stop
      run: |
        make alpine-${{ matrix.version }}.ssh.stop
    - name: alpine-images
      uses: actions/upload-artifact@v2
      with:
        name: alpine-${{ matrix.version }}.images
        path: |
          data/img
